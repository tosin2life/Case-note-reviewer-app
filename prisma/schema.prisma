// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  name        String?
  role        String?
  institution String?
  password    String?
  emailVerified DateTime? @map("email_verified")
  image       String?
  resetToken  String?   @map("reset_token")
  resetTokenExpiry DateTime? @map("reset_token_expiry")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // NextAuth relations
  accounts    Account[]
  sessions    Session[]
  
  // Your existing relations
  cases       Case[]
  
  @@map("users")
}

model Case {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  title       String?
  caseNotes   String   @map("case_notes") @db.Text
  
  // Scoring fields
  totalScore           Int     @map("total_score")
  historyPhysicalScore Int     @map("history_physical_score")
  historyPhysicalFeedback String @map("history_physical_feedback") @db.Text
  differentialScore    Int     @map("differential_score")
  differentialFeedback String  @map("differential_feedback") @db.Text
  assessmentPlanScore  Int     @map("assessment_plan_score")
  assessmentPlanFeedback String @map("assessment_plan_feedback") @db.Text
  followupScore        Int     @map("followup_score")
  followupFeedback     String  @map("followup_feedback") @db.Text
  
  // AI metadata
  aiModelUsed     String  @map("ai_model_used")
  processingTime  Float   @map("processing_time")
  tokenUsage      Json?   @map("token_usage")
  
  // Timestamps
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Indexes
  @@index([userId])
  @@index([createdAt])
  @@map("cases")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

